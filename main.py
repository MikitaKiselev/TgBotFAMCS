from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
import FamcsBotMarkups as mk
import config
import asyncio
from parsing import all_posts
from parsing import new_post

TOKEN = config.TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –º–µ–Ω—é—à–∫–∞
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥\U0001FAE6\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ –∂–∏–∑–Ω—å!\n\n\
–Ø –∏—â—É –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ <b>LinkedIn</b>, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å IT –∏ —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n\
–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É \n/start_searching_for_new_job\n–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É\
\n/stop_searching_for_new_job\n\n–¢–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤ –ª—é–±—É—é –º–∏–Ω—É—Ç—É –≥–ª—è–Ω—É—Ç—å <b>—Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> üëÄ\
\n\n–ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å —Å–µ–±—è –∏—Å—Ç–∏–Ω—ã–º –§–ü–ú–æ–≤—Ü–æ–º, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—è–∑–∞–Ω –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏üòâ\n\
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ \n/start_test\n–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n/stop_test\n\n\
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @payalnik144 @starostarka", parse_mode="html", reply_markup=mk.startMenu)


@dp.message_handler(text='–í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
async def points_call(message: types.Message):
    total_list = all_posts()
    if total_list == "":
        await message.answer('–°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç(')
    else:
        await message.answer(total_list, parse_mode=types.ParseMode.HTML)

user_data = {}
test_data = {
    "–¢–≤–æ–π –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç:": ["–ü—Ä–æ–≥–∞0", "–ê–ª–≥–µ–±—Ä–∞0", "–ú–∞—Ç–∞–Ω0", "–ù–µ —Ö–æ–∂—É –Ω–∞ –ø–∞—Ä—ã –∏ –Ω–µ –∑–Ω–∞—é –ø—Ä–µ–¥–º–µ—Ç—ã1"],
    "–õ—é–±–∏–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –¥–æ—Ç–µ:": ["–°—Ñ 1000-7 zxc0", "–ö—Ä–∏—Å—Ç–∞–ª–∫–∞0", "–ü–£–î–ñ1"],
    "–ö—Ç–æ —Å–∞–º–∞—è hot girl –Ω–∞ –§–ü–ú–ò?": ["–£–ª—å—è–Ω–∞1", "–°—Ç–∞—Ä–æ—Å—Ç–∞ 12 –≥—Ä—É–ø–ø—ã0", "–°–ø—Ä–æ—Å–∏—Ç–µ –ú–∞—Ç–≤–µ–µ–≤–∞0", "–ù–∏–∫–∏—Ç–∞1", "–ø–æ–ª–∏–Ω–∞ –∂–æ—Å9", "—Ç–∏–º–∞9"],
    "–¢–≤–æ–π –ª—é–±–∏–º—ã–π —Å–µ—Ä–∏–∞–ª:": ["–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –≤–µ–∫0", "–ù–µ —Å–º–æ—Ç—Ä—é —Å–µ—Ä–∏–∞–ª—ã, –æ–Ω–ª–∏ –∞–Ω–∏–º–µ0", "–¢–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã –∏ —Ç–æ–ª—å–∫–æ —Å –†–∞–π–æ–Ω–æ–º –ì–æ—Å–ª–∏–Ω–≥–æ–º1"],
    "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ": ["x'=-x+10", "t''+4t'+t=01", "Dx=10", "x''+2x'+x+5=00"],
    "–°–æ—Ä–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥—É—à–Ω—ã–π –≤–æ–ø—Ä–æ—Åü§Æ\n\n–õ—é–±–∏–º—ã–π —Ñ–∏–∫—Å–∏–∫": ["–ù–æ–ª–∏–∫0", "–ö—Ä–µ—Å—Ç–∏–∫1", "–ü–∞–ø—É—Å0", "–ê–Ω—É—Å0"],
    "–õ—É—á—à–∞—è —à–∞—É—Ä–º–∞ –≤ –≥–æ—Ä–æ–¥–µ": ["–ñ–∞–Ω—á–∏–∫0", "–ñ–∞–Ω—á–∏–∫0", "–ñ–∞–Ω—á–∏–∫1", "–ñ–∞–Ω—á–∏–∫0"],
    "117/20 = ?\n\n–ù–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...4...3...2...1": ["6.20", "6.150", "5.750", "–¢—É—Ç –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç1"],
    "–õ—É—á—à–∞—è –∏–≥—Ä–∞": ["–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç0", "–î–æ–∫–∞20", "–ù–∞–ø–∏—Å–∞–Ω–Ω–∞—è –§–ü–ú—â–∏–∫–æ–º0", "–ù–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–µ –§–ü–ú—â–∏–∫–æ–º1"],
    "–õ—é–±–∏–º–æ–µ —á–∏—Å–ª–æ": ["1000", "20", "41", "6660", "—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç–æ–µ9"]
}
questions = ["–¢–≤–æ–π –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç:",
             "–õ—é–±–∏–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –¥–æ—Ç–µ:",
             "–ö—Ç–æ —Å–∞–º–∞—è hot girl –Ω–∞ –§–ü–ú–ò?",
             "–¢–≤–æ–π –ª—é–±–∏–º—ã–π —Å–µ—Ä–∏–∞–ª:",
             "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ",
             "–°–æ—Ä–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥—É—à–Ω—ã–π –≤–æ–ø—Ä–æ—Åü§Æ\n\n–õ—é–±–∏–º—ã–π —Ñ–∏–∫—Å–∏–∫",
             "–õ—É—á—à–∞—è —à–∞—É—Ä–º–∞ –≤ –≥–æ—Ä–æ–¥–µ",
             "117/20 = ?\n\n–ù–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...4...3...2...1",
             "–õ—É—á—à–∞—è –∏–≥—Ä–∞",
             "–õ—é–±–∏–º–æ–µ —á–∏—Å–ª–æ"
             ]

test_status = False
number = 0


@dp.message_handler(commands='start_test')
async def start_test(message: types.Message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_data or not user_data[chat_id]['test_status']:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        '''user_data[chat_id] = {
            'test_status': True,
            'score': 0,
            'number': 0
        }'''
        user_data[chat_id]['test_status'] = True
        user_data[chat_id]['score'] = 0
        user_data[chat_id]['number'] = 0
        await message.answer("–ù–∞ –§–ü–ú–ò –µ—Å—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å \
—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–µ–±—è, –≤–µ–¥—å –§–ü–ú–ò —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –æ–± —É—á–µ–±–µ! \n–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.")
        await send_question(chat_id)


async def send_question(chat_id):
    user = user_data[chat_id]
    testButtons = ReplyKeyboardMarkup(resize_keyboard=True)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    answer_options = test_data.get(questions[user['number']])

    for idx, button in enumerate(answer_options):
        if user['number'] == 2:
            if idx < len(answer_options) - 2:
                testButtons.add(button[:len(button) - 1])
        elif user['number'] == 9:
            if idx < len(answer_options) - 1:
                testButtons.add(button[:len(button) - 1])
        else:
            testButtons.add(button[:len(button) - 1])

    await bot.send_message(chat_id, questions[user['number']], reply_markup=testButtons)


async def test_result(chat_id):
    user = user_data[chat_id]
    user['test_status'] = False
    user['number'] = 0
    if user['score'] <= 5:
        await bot.send_message(chat_id, "–û–≥–æ, –Ω–∏—á–µ–≥–æ —Å–µ–±–µ! –¢–µ–±–µ –æ—á–µ–Ω—å –ø–æ–≤–µ–∑–ª–æ, —Ç—ã –Ω–∞ 100% –ø–æ–¥—Ö–æ–¥–∏—à—å –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ë–ì–£ - –ë–†–°–ú!", reply_markup=mk.startMenu)
    elif user['score'] == 7 or user['score'] == 6:
        await bot.send_message(chat_id, "–•–æ—á—É —Ç–µ–±—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å, –º–∏–ª—ã–π –º–æ–π, —Ç–≤–æ—è —Å—Ç–∏—Ö–∏—è - —ç—Ç–æ –°–ö–°", reply_markup=mk.startMenu)
    elif user['score'] == 8:
        await bot.send_message(chat_id, "–ê —Ç—ã —Ö–æ—Ä–æ—à, —Ç–≤–æ—è –¥–æ—Ä–æ–≥–∞ –ª–µ–∂–∏—Ç –≤ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –°–æ—é–∑!!!", reply_markup=mk.startMenu)
    else:
        await bot.send_message(chat_id, '–ß—Ç–æ –∂... –¢—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –§–ü–ú–æ–≤–µ—Ü –∏ –æ–±—è–∑–∞–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ä—è–¥—ã –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ—é–∑–∞ –§–ü–ú–ò!', reply_markup=mk.startMenu)
    print(user['score'])


@dp.message_handler(commands=['stop_test'])
async def stop_test(message: types.Message):
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id]['test_status']:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞ –∏ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[chat_id]['test_status'] = False
        user_data[chat_id]['number'] = 0
        user_data[chat_id]['score'] = 0
        await message.answer("–ñ–∞–ª—å, —á—Ç–æ —Ç—ã —Ç–∞–∫ –∏ –Ω–µ —É–∑–Ω–∞–ª —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é...\n\
–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞!", reply_markup=mk.startMenu)
    else:
        await message.answer("–¢—ã –µ—â–µ –¥–∞–∂–µ –Ω–µ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç, —á—Ç–æ–± –µ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å...\n–¢—ã–∫–∞–π —Å—é–¥–∞ /start_test, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")


# –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –º–µ–Ω—é—à–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤—ã–±–æ—Ä —Å–ø–µ—Ü—É—Ö–∏, –Ω–æ —ç—Ç –ø–æ–∑–∂–µ)
@dp.message_handler(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def timetable_call(message: types.Message):
    chat_id = message.chat.id
    if chat_id in user_data and 'course' in user_data[chat_id]:
        await message.answer('–ß—Ç–æ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=mk.mainCoourseMenu)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å', reply_markup=mk.courseMenu)
        user_data[chat_id] = {}
        user_data[chat_id]['test_status'] = False

    #await message.answer('–ö–∞–∫–∞—è —É —Ç–µ–±—è –≥—Ä—É–ø–ø–∞?')


async def get_group(chat_id):
    await bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def timetable_call(message: types.Message):
    await message.answer('–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∏ —Å–∫–∏–Ω—É—Ç—å –£–ª—å—è–Ω–µ –Ω–∞ –±—Ä–æ–≤–∏ üíÖ\n(—Ç—É—Ç –±—É–¥–µ—Ç –º–æ–π —Å—Ç—É–¥–∞–∫ –ø–æ—Ç–æ–º)\n\
\n–£–ª—å—è–Ω–∞ –æ–±–æ–π–¥—ë—Ç—Å—è –±–µ–∑ –±—Ä–æ–≤–µ–π, –∞ –≤–æ—Ç –ù–∏–∫–∏—Ç–∞ –±–µ–∑ –ø–∏–≤–∞ –Ω–∏–∫–∞–∫. –í—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—åüòâ\n(—Ç—É—Ç –±—É–¥–µ—Ç –º–æ–π —Å—Ç—É–¥–∞–∫ –ø–æ—Ç–æ–º)')


# –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
'''
@dp.callback_query_handler(text='1')
async def timetable1_call(callback: types.CallbackQuery):
    await callback.message.answer('–≥–∞–≤–Ω–æ\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1*')
    await callback.answer()


@dp.callback_query_handler(text='2')
async def timetable2_call(callback: types.CallbackQuery):
    await callback.message.answer('–∑–∞–ª—É–ø–∞\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2*')
    await callback.answer()


@dp.callback_query_handler(text='3')
async def timetable3_call(callback: types.CallbackQuery):
    await callback.message.answer('–ø–µ–Ω–∏—Å\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 3*')
    await callback.answer()


@dp.callback_query_handler(text='4')
async def timetable4_call(callback: types.CallbackQuery):
    await callback.message.answer('—Ö–µ—Ä\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 4*')
    await callback.answer()
'''

chat_states = {}


@dp.message_handler(commands=['start_searching_for_new_job'])
async def start_searching_for_new_job(message: types.Message):
    global chat_states

    chat_id = message.chat.id
    if chat_id not in chat_states or not chat_states[chat_id]:
        chat_states[chat_id] = True
        await message.answer("–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω")
        while chat_states[chat_id]:
            post = new_post()
            if post is not None:
                await message.answer(post, parse_mode=types.ParseMode.HTML)
            await asyncio.sleep(1200)
    else:
        await message.answer("–ü–æ–∏—Å–∫ –∏–¥—ë—Ç")


@dp.message_handler(commands=['stop_searching_for_new_job'])
async def stop_searching_for_new_job(message: types.Message):
    global chat_states

    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]:
        chat_states[chat_id] = False
        await message.answer("–ü–æ–∏—Å–∫ –ø—Ä–µ–∫—Ä–∞—â—ë–Ω")
    else:
        await message.answer("–ü–æ–∏—Å–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")


@dp.message_handler()
async def check_answer(message: types.Message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in user_data and user_data[chat_id]['test_status']:
        user = user_data[chat_id]
        check = False
        answer = ""

        current_question_index = user['number']
        for line in test_data.get(questions[current_question_index]):
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫
            print(current_question_index)
            print(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: {message.text.strip().lower()} –∏ {line[:len(line) - 1].strip().lower()}")

            if message.text.strip().lower() == line[:len(line) - 1].strip().lower():
                check = True
                answer = line
                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ

        if not check:
            await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ü§¨')
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
            user['score'] += int(answer[len(answer) - 1])
            if current_question_index == len(questions) - 1:
                await test_result(chat_id)
            else:
                user['number'] += 1
                await send_question(chat_id)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å
        if message.text.isdigit():
            if 'course' not in user_data[chat_id]:
                user_data[message.chat.id]['course'] = message.text
                await get_group(message.chat.id)
            else:
                user_data[message.chat.id]['group'] = message.text
                await message.answer('–ß—Ç–æ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=mk.mainCoourseMenu)
        else:
            await bot.send_message(chat_id, '–ë—Ä–∞—Ç–∏—à–∫–∞, —è —Ö–∑ —á–µ–≥–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏,\
–∞ –ø–æ—Ç–æ–º —É–∂–µ –ø—É–∫–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
