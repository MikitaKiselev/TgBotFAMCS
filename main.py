from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup
import FamcsBotMarkups as mk
import config
import asyncio
import json
from parsing import all_posts
from parsing import new_post

TOKEN = config.TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

selected_language = 'ru'

with open('package.json', 'r', encoding='utf-8') as file:
    translations = json.load(file)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –º–µ–Ω—é—à–∫–∞
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥\U0001FAE6\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ –∂–∏–∑–Ω—å!\n\n –Ø –∏—â—É –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ <b>LinkedIn</b>, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å IT –∏ —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É \n/start_searching_for_new_job\n–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É \n/stop_searching_for_new_job\n\n–¢–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤ –ª—é–±—É—é –º–∏–Ω—É—Ç—É –≥–ª—è–Ω—É—Ç—å <b>—Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> üëÄ\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @payalnik144 @starostarka", parse_mode="html", reply_markup=mk.startMenu)


@dp.message_handler(text='–í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
async def points_call(message: types.Message):
    total_list = all_posts()
    if total_list == "":
        await message.answer('–°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç(')
    else:
        await message.answer(total_list, parse_mode=types.ParseMode.HTML)


test_data = {
    '–¢–≤–æ–π –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç:': ["–ü—Ä–æ–≥–∞0", "–ê–ª–≥–µ–±—Ä–∞0", "–ú–∞—Ç–∞–Ω0", "–ù–µ —Ö–æ–∂—É –Ω–∞ –ø–∞—Ä—ã –∏ –Ω–µ –∑–Ω–∞—é –ø—Ä–µ–¥–º–µ—Ç—ã1"],
    "–õ—é–±–∏–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –¥–æ—Ç–µ:": ["–°—Ñ 1000-7 zxc0", "–ö—Ä–∏—Å—Ç–∞–ª–∫–∞0", "–ü–£–î–ñ1"],
    "–ö—Ç–æ —Å–∞–º–∞—è hot girl –Ω–∞ –§–ü–ú–ò?": ["–£–ª—å—è–Ω–∞1", "–°—Ç–∞—Ä–æ—Å—Ç–∞ 12 –≥—Ä—É–ø–ø—ã0", "–°–ø—Ä–æ—Å–∏—Ç–µ –ú–∞—Ç–≤–µ–µ–≤–∞0"],
    "–¢–≤–æ–π –ª—é–±–∏–º—ã–π —Å–µ—Ä–∏–∞–ª:": ["–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –≤–µ–∫0", "–ù–µ —Å–º–æ—Ç—Ä—é —Å–µ—Ä–∏–∞–ª—ã, –æ–Ω–ª–∏ –∞–Ω–∏–º–µ0", "–¢–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã –∏ —Ç–æ–ª—å–∫–æ —Å –†–∞–π–æ–Ω–æ–º –ì–æ—Å–ª–∏–Ω–≥–æ–º1"],
    "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ": ["x'=-x+10", "t''+4t'+t=01", "Dx=10", "x''+2x'+x+5=00"],
}
questions = ['–¢–≤–æ–π –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç:', "–õ—é–±–∏–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –¥–æ—Ç–µ:", "–ö—Ç–æ —Å–∞–º–∞—è hot girl –Ω–∞ –§–ü–ú–ò?", "–¢–≤–æ–π –ª—é–±–∏–º—ã–π —Å–µ—Ä–∏–∞–ª:", "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ"]

test_status = False
number = 0


@dp.message_handler(text='–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç')
async def start_test(message: types.Message):
    global test_status
    global score
    test_status = True
    score = 0
    await message.answer("–ù–∞ –§–ü–ú–ò –µ—Å—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–µ–±—è, –≤–µ–¥—å –§–ü–ú–ò —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –æ–± —É—á–µ–±–µ! \n–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.")
    chat_id = message.chat.id
    await send_question(number, chat_id)


async def send_question(n, chat_id):
    testButtons = ReplyKeyboardMarkup(resize_keyboard=True)
    for button in test_data.get(questions[n]):
        testButtons.add(button[:len(button)-1])
    await bot.send_message(chat_id, questions[n], reply_markup=testButtons)
    global number
    number += 1


async def test_result(chat_id):
    global test_status
    test_status = False
    global number
    number = 0
    if score == 5:
        await bot.send_message(chat_id, "–ß—Ç–æ –∂... –¢—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –§–ü–ú–æ–≤–µ—Ü –∏ –æ–±—è–∑–∞–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ä—è–¥—ã –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ—é–∑–∞ –§–ü–ú–ò!", reply_markup=mk.startMenu)
    else:
        await bot.send_message(chat_id, '–û–≥–æ, –Ω–∏—á–µ–≥–æ —Å–µ–±–µ! –¢–µ–±–µ –æ—á–µ–Ω—å –ø–æ–≤–µ–∑–ª–æ, —Ç—ã –Ω–∞ 100% –ø–æ–¥—Ö–æ–¥–∏—à—å –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ë–ì–£ - –ë–†–°–ú!', reply_markup=mk.startMenu)


# –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –º–µ–Ω—é—à–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤—ã–±–æ—Ä —Å–ø–µ—Ü—É—Ö–∏, –Ω–æ —ç—Ç –ø–æ–∑–∂–µ)
@dp.message_handler(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def timetable_call(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å', reply_markup=mk.courseMenu)


@dp.message_handler(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def timetable_call(message: types.Message):
    await message.answer('–¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∏ —Å–∫–∏–Ω—É—Ç—å –£–ª—å—è–Ω–µ –Ω–∞ –±—Ä–æ–≤–∏ üíÖ\n(—Ç—É—Ç –±—É–¥–µ—Ç –º–æ–π —Å—Ç—É–¥–∞–∫ –ø–æ—Ç–æ–º)')


# –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
@dp.callback_query_handler(text='1')
async def timetable1_call(callback: types.CallbackQuery):
    await callback.message.answer('–≥–∞–≤–Ω–æ\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1*')
    await callback.answer()


@dp.callback_query_handler(text='2')
async def timetable2_call(callback: types.CallbackQuery):
    await callback.message.answer('–∑–∞–ª—É–ø–∞\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2*')
    await callback.answer()


@dp.callback_query_handler(text='3')
async def timetable3_call(callback: types.CallbackQuery):
    await callback.message.answer('–ø–µ–Ω–∏—Å\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 3*')
    await callback.answer()


@dp.callback_query_handler(text='4')
async def timetable4_call(callback: types.CallbackQuery):
    await callback.message.answer('—Ö–µ—Ä\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 4*')
    await callback.answer()

chat_states = {}


@dp.message_handler(commands=['start_searching_for_new_job'])
async def start_searching_for_new_job(message: types.Message):
    global chat_states

    chat_id = message.chat.id
    if chat_id not in chat_states or not chat_states[chat_id]:
        chat_states[chat_id] = True
        back_list = []
        await message.answer("–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω")
        while chat_states[chat_id]:
            post = new_post()
            if post is not None:
                await message.answer(post, parse_mode=types.ParseMode.HTML)
            await asyncio.sleep(1800)


@dp.message_handler(commands=['stop_searching_for_new_job'])
async def stop_searching_for_new_job(message: types.Message):
    global chat_states

    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]:
        chat_states[chat_id] = False
        await message.answer("–ü–æ–∏—Å–∫ –ø—Ä–µ–∫—Ä–∞—â—ë–Ω")


@dp.message_handler()
async def check_answer(message: types.Message):
    if test_status:
        chat_id = message.chat.id
        check = False
        answer = ""
        for line in test_data.get(questions[number-1]):
            if message.text == line[:len(line)-1]:
                check = True
                answer = line
        if not check:
            await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ü§¨')
        else:
            global score
            score += int(answer[len(answer)-1])
            if number == len(questions):
                await test_result(chat_id)
            else:
                await send_question(number, chat_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
