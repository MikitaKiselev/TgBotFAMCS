from aiogram import Bot, Dispatcher, executor, types
import FamcsBotMarkups as mk
import config
import asyncio
from parsing import all_posts
from parsing import new_post

TOKEN = config.TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –º–µ–Ω—é—à–∫–∞
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥\U0001FAE6\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ –∂–∏–∑–Ω—å!\n\n\
–Ø –∏—â—É –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ <b>LinkedIn</b>, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å IT –∏ —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n\
–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É \n/start_searching_for_new_job\n\
–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É \n/stop_searching_for_new_job\n\n\
–¢–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤ –ª—é–±—É—é –º–∏–Ω—É—Ç—É –≥–ª—è–Ω—É—Ç—å <b>—Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> üëÄ\n\n\
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @payalnik144 @starostarka", parse_mode="html", reply_markup=mk.startMenu)


@dp.message_handler(text='–í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
async def points_call(message: types.Message):
    total_list = all_posts()
    await message.answer(total_list, parse_mode=types.ParseMode.HTML)


# –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –º–µ–Ω—é—à–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤—ã–±–æ—Ä —Å–ø–µ—Ü—É—Ö–∏, –Ω–æ —ç—Ç –ø–æ–∑–∂–µ)
@dp.message_handler(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def timetable_call(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å', reply_markup=mk.courseMenu)


# –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
@dp.callback_query_handler(text='1')
async def timetable1_call(callback: types.CallbackQuery):
    await callback.message.answer('–≥–∞–≤–Ω–æ\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 1*')
    await callback.answer()


@dp.callback_query_handler(text='2')
async def timetable2_call(callback: types.CallbackQuery):
    await callback.message.answer('–∑–∞–ª—É–ø–∞\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2*')
    await callback.answer()


@dp.callback_query_handler(text='3')
async def timetable3_call(callback: types.CallbackQuery):
    await callback.message.answer('–ø–µ–Ω–∏—Å\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 3*')
    await callback.answer()


@dp.callback_query_handler(text='4')
async def timetable4_call(callback: types.CallbackQuery):
    await callback.message.answer('—Ö–µ—Ä\n*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 4*')
    await callback.answer()

chat_states = {}


@dp.message_handler(commands=['start_searching_for_new_job'])
async def start_searching_for_new_job(message: types.Message):
    global chat_states

    chat_id = message.chat.id
    if chat_id not in chat_states or not chat_states[chat_id]:
        chat_states[chat_id] = True
        back_list = []
        await message.answer("–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω")
        while chat_states[chat_id]:
            post, back_list = new_post(back_list)
            if post is not None:
                await message.answer(post, parse_mode=types.ParseMode.HTML)
            await asyncio.sleep(1800)


@dp.message_handler(commands=['stop_searching_for_new_job'])
async def stop_searching_for_new_job(message: types.Message):
    global chat_states

    chat_id = message.chat.id
    if chat_id in chat_states and chat_states[chat_id]:
        chat_states[chat_id] = False
        await message.answer("–ü–æ–∏—Å–∫ –ø—Ä–µ–∫—Ä–∞—â—ë–Ω")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
